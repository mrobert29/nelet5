{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"v",
				"values"
			],
			[
				"clo",
				"clock"
			],
			[
				"alpha",
				"alpha_status"
			],
			[
				"best",
				"best_validation_loss"
			],
			[
				"save",
				"save_sortie"
			],
			[
				"nb",
				"nb_changements"
			],
			[
				"w",
				"write"
			],
			[
				"Tr",
				"TrSet"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\"\"\"This tutorial introduces the LeNet5 neural network architecture\nusing Theano.  LeNet5 is a convolutional neural network, good for\nclassifying images. This tutorial shows how to build the architecture,\nand comes with all the hyper-parameters you need to reproduce the\npaper's MNIST results.\n\n\nThis implementation simplifies the model in the following ways:\n\n - LeNetConvPool doesn't implement location-specific gain and bias parameters\n - LeNetConvPool doesn't implement pooling by average, it implements pooling\n   by max.\n - Digit classification is implemented with a logistic regression rather than\n   an RBF network\n - LeNet5 was not fully-connected convolutions at second layer\n\nReferences:\n - Y. LeCun, L. Bottou, Y. Bengio and P. Haffner:\n   Gradient-Based Learning Applied to Document\n   Recognition, Proceedings of the IEEE, 86(11):2278-2324, November 1998.\n   http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf\n\n\"\"\"\nimport os\nimport sys\nimport time\n\nimport numpy\nimport pylab\n\nimport theano\nimport theano.tensor as T\nfrom theano.tensor.signal import downsample\nfrom theano.tensor.nnet import conv\nimport cPickle\n\nfrom logistic_sgd import BinaryLogisticRegression,LogisticRegression, load_data\nfrom mlp import HiddenLayer, Binary_HiddenLayer\nimport matplotlib.pyplot as plt\n\n\n\nclass LeNetConvPoolLayer(object):\n    \"\"\"Pool Layer of a convolutional network \"\"\"\n\n    def __init__(self, rng, input, filter_shape, image_shape, poolsize=(2, 2)):\n        \"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dtensor4\n        :param input: symbolic image tensor, of shape image_shape\n\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num input feature maps,\n                              filter height, filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num input feature maps,\n                             image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows, #cols)\n        \"\"\"\n\n        assert image_shape[1] == filter_shape[1]\n        self.input = input\n\n        # there are \"num input feature maps * filter height * filter width\"\n        # inputs to each hidden unit\n        fan_in = numpy.prod(filter_shape[1:])\n        # each unit in the lower layer receives a gradient from:\n        # \"num output feature maps * filter height * filter width\" /\n        #   pooling size\n        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /\n                   numpy.prod(poolsize))\n        # initialize weights with random weights\n        W_bound = numpy.sqrt(6. / (fan_in + fan_out))\n        self.W = theano.shared(\n            numpy.asarray(\n                rng.uniform(low=-W_bound, high=W_bound, size=filter_shape),\n                dtype=theano.config.floatX\n            ),\n            borrow=True\n        )\n\n        # the bias is a 1D tensor -- one bias per output feature map\n        b_values = numpy.zeros((filter_shape[0],), dtype=theano.config.floatX)\n        self.b = theano.shared(value=b_values, borrow=True)\n\n        # convolve input feature maps with filters\n        conv_out = conv.conv2d(\n            input=input,\n            filters=self.W,\n            filter_shape=filter_shape,\n            image_shape=image_shape\n        )\n\n        # downsample each feature map individually, using maxpooling\n        pooled_out = downsample.max_pool_2d(\n            input=conv_out,\n            ds=poolsize,\n            ignore_border=True\n        )\n\n        # add the bias term. Since the bias is a vector (1D array), we first\n        # reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will\n        # thus be broadcasted across mini-batches and feature map\n        # width & height\n        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))\n\n        # store parameters of this layer\n        self.params = [self.W, self.b]\n\nclass BinaryLeNetConvPoolLayer(object):\n    \"\"\"Pool Layer of a convolutional network \"\"\"\n\n    def __init__(self,W,b, rng, input, filter_shape, image_shape, poolsize=(2, 2)):\n        \"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dtensor4\n        :param input: symbolic image tensor, of shape image_shape\n\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num input feature maps,\n                              filter height, filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num input feature maps,\n                             image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows, #cols)\n        \"\"\"\n\n        assert image_shape[1] == filter_shape[1]\n        self.input = input\n\n        # there are \"num input feature maps * filter height * filter width\"\n        # inputs to each hidden unit\n        fan_in = numpy.prod(filter_shape[1:])\n        # each unit in the lower layer receives a gradient from:\n        # \"num output feature maps * filter height * filter width\" /\n        #   pooling size\n        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /\n                   numpy.prod(poolsize))\n        # initialize weights with random weights\n        W_bound = numpy.sqrt(6. / (fan_in + fan_out))\n        self.W = 0.01*(W>0)-0.01*(W<0)\n        # initialize the baises b as a vector of n_out 0s\n        self.b = b\n\n        # convolve input feature maps with filters\n        conv_out = conv.conv2d(\n            input=input,\n            filters=self.W,\n            filter_shape=filter_shape,\n            image_shape=image_shape\n        )\n\n        # downsample each feature map individually, using maxpooling\n        pooled_out = downsample.max_pool_2d(\n            input=conv_out,\n            ds=poolsize,\n            ignore_border=True\n        )\n\n        # add the bias term. Since the bias is a vector (1D array), we first\n        # reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will\n        # thus be broadcasted across mini-batches and feature map\n        # width & height\n        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))\n\n        # store parameters of this layer\n        self.params = [self.W, self.b]\n\n\ndef evaluate_lenet5(learning_rate=0.1, n_epochs=200,\n                    dataset='mnist.pkl.gz',\n                    nkerns=[20, 50], batch_size=500):\n    \"\"\" Demonstrates lenet on MNIST dataset\n\n    :type learning_rate: float\n    :param learning_rate: learning rate used (factor for the stochastic\n                          gradient)\n\n    :type n_epochs: int\n    :param n_epochs: maximal number of epochs to run the optimizer\n\n    :type dataset: string\n    :param dataset: path to the dataset used for training /testing (MNIST here)\n\n    :type nkerns: list of ints\n    :param nkerns: number of kernels on each layer\n    \"\"\"\n\n    rng = numpy.random.RandomState(23455)\n\n    datasets = load_data(dataset)\n\n    train_set_x, train_set_y = datasets[0]\n    valid_set_x, valid_set_y = datasets[1]\n    test_set_x, test_set_y = datasets[2]\n    \n    #print train_set_x[0,:].eval()\n    #print train_set_x.shape.eval()  #50000*784\n    #print train_set_y.shape.eval()  #50000\n    #print valid_set_x.shape.eval()  #10000*784\n    #print valid_set_y.shape.eval()  #10000\n    #print test_set_x.shape.eval()   #10000*784\n    #print test_set_y.shape.eval()   #10000\n\n    # compute number of minibatches for training, validation and testing\n    n_train_batches = train_set_x.get_value(borrow=True).shape[0]\n    n_valid_batches = valid_set_x.get_value(borrow=True).shape[0]\n    n_test_batches = test_set_x.get_value(borrow=True).shape[0]\n    n_train_batches /= batch_size\n    n_valid_batches /= batch_size\n    n_test_batches /= batch_size\n\n    # allocate symbolic variables for the data\n    index = T.lscalar()  # index to a [mini]batch\n\n    # start-snippet-1\n    x = T.matrix('x')   # the data is presented as rasterized images\n    y = T.ivector('y')  # the labels are presented as 1D vector of\n                        # [int] labels\n                         \n\n    ######################\n    # BUILD ACTUAL MODEL #\n    ######################\n    print '... building the model'\n\n    # Reshape matrix of rasterized images of shape (batch_size, 28 * 28)\n    # to a 4D tensor, compatible with our LeNetConvPoolLayer\n    # (28, 28) is the size of MNIST images.\n    layer0_input = x.reshape((batch_size, 1, 28, 28))\n\n    # Construct the first convolutional pooling layer:\n    # filtering reduces the image size to (28-5+1 , 28-5+1) = (24, 24)\n    # maxpooling reduces this further to (24/2, 24/2) = (12, 12)\n    # 4D output tensor is thus of shape (batch_size, nkerns[0], 12, 12)\n    layer0 = LeNetConvPoolLayer(\n        rng,\n        input=layer0_input,\n        image_shape=(batch_size, 1, 28, 28),\n        filter_shape=(nkerns[0], 1, 5, 5),\n        poolsize=(2, 2)\n    )\n\n\n    #outputLayer0=layer0.output\n    #array=outputLayer0.eval({x: test_set_x[0:500, :].eval()})\n    #array1=array[10, 0, :, :]\n    #array2=array[20, 0, :, :]\n    #arr=[array1,array2]\n    #pylab.imshow(arr[1], cmap=pylab.gray())\n\n    #f = pylab.figure()\n    #for i in range(1, 2):\n    #    f.add_subplot(1, 2, i)  # this line outputs images on top of each other\n    #    pylab.imshow(arr[i-1],cmap=pylab.gray())\n    #pylab.title('Double image')\n    #pylab.show()\n    \n   \n\n    # Construct the second convolutional pooling layer\n    # filtering reduces the image size to (12-5+1, 12-5+1) = (8, 8)\n    # maxpooling reduces this further to (8/2, 8/2) = (4, 4)\n    # 4D output tensor is thus of shape (batch_size, nkerns[1], 4, 4)\n    layer1 = LeNetConvPoolLayer(\n        rng,\n        input=layer0.output,\n        image_shape=(batch_size, nkerns[0], 12, 12),\n        filter_shape=(nkerns[1], nkerns[0], 5, 5),\n        poolsize=(2, 2)\n    )\n\n    # the HiddenLayer being fully-connected, it operates on 2D matrices of\n    # shape (batch_size, num_pixels) (i.e matrix of rasterized images).\n    # This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),\n    # or (500, 50 * 4 * 4) = (500, 800) with the default values.\n    layer2_input = layer1.output.flatten(2)\n\n    # construct a fully-connected sigmoidal layer\n    layer2 = HiddenLayer(\n        rng,\n        input=layer2_input,\n        n_in=nkerns[1] * 4 * 4,\n        n_out=500,\n        activation=T.tanh\n    )\n\n\n\n    # classify the values of the fully-connected sigmoidal layer\n    layer3 = LogisticRegression(input=layer2.output, n_in=500, n_out=10)\n    #layer3_binary = LogisticRegression(input=layer2.output, n_in=500, n_out=10)\n    #layer3_binary.W=1*(layer3_binary.W>0.5)\n    layer3_binary=BinaryLogisticRegression(layer3.W,layer3.b,input=layer2.output, n_in=500, n_out=10)\n\n    # the cost we minimize during training is the NLL of the model\n    #cost = layer3.negative_log_likelihood(y)\n\n    alpha=1;\n    cl0=0\n    cl1=(((layer1.W+0.01)**2)*(layer1.W-0.01)**2).sum()\n    cl2=(((layer2.W+0.01)**2)*(layer2.W-0.01)**2).sum()\n    cl3=(((layer3.W+0.01)**2)*(layer3.W-0.01)**2).sum()\n\n\n    cost=(layer3.negative_log_likelihood(y)+alpha*(cl0+cl1+cl2+cl3))\n\n    # create a function to compute the mistakes that are made by the model\n    test_model = theano.function(\n        [index],\n        layer3.errors(y),\n        givens={\n            x: test_set_x[index * batch_size: (index + 1) * batch_size],\n            y: test_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    test_binary_model = theano.function(\n        [index],\n        layer3_binary.errors(y),\n        givens={\n            x: test_set_x[index * batch_size: (index + 1) * batch_size],\n            y: test_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    validate_model = theano.function(\n        [index],\n        layer3.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n            y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    validate_binary_model = theano.function(\n        [index],\n        layer3_binary.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n            y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    # create a list of all model parameters to be fit by gradient descent\n    params = layer3.params + layer2.params + layer1.params + layer0.params\n\n    # create a list of gradients for all model parameters\n    grads = T.grad(cost, params)\n    ##grads=params;\n\n\n    # train_model is a function that updates the model parameters by\n    # SGD Since this model has many parameters, it would be tedious to\n    # manually create an update rule for each model parameter. We thus\n    # create the updates list by automatically looping over all\n    # (params[i], grads[i]) pairs.\n    updates = [\n        (param_i, param_i - learning_rate * grad_i)\n        for param_i, grad_i in zip(params, grads)\n    ]\n\n    train_model = theano.function(\n        [index],\n        cost,\n        updates=updates,\n        givens={\n            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n        },\n        on_unused_input='ignore',\n\n    )\n    # end-snippet-1\n\n    ###############\n    # TRAIN MODEL #\n    ###############\n    print '... training'\n    titre = 'var'\n\n\n    \n\n    fichier = open(titre+\"-p\",\"a\")\n    fichier.write('---- New Train ---- \\n' %\n                ())\n\n    fichier.close()\n\n\n    # early-stopping parameters\n    patience = 10000  # look as this many examples regardless\n    patience_increase = 2  # wait this much longer when a new best is\n                           # found\n    improvement_threshold = 0.995  # a relative improvement of this much is\n                                   # considered significant\n    validation_frequency = min(n_train_batches, patience / 2)\n                                  # go through this many\n                                  # minibatche before checking the network\n                                  # on the validation set; in this case we\n                                  # check every epoch\n\n    best_validation_loss = numpy.inf\n    best_iter = 0\n    test_score = 0.\n    start_time = time.clock()\n    \n    epoch = 0\n    done_looping = False\n    \n    while (epoch < n_epochs) and (not done_looping):\n        epoch = epoch + 1\n        for minibatch_index in xrange(n_train_batches):\n            \n            #pylab.hist(layer3.W.get_value(), bins=50)\n            #pylab.show()\n            \n            \n\n            iter = (epoch - 1) * n_train_batches + minibatch_index\n\n            if iter % 100 == 0:\n                print 'training @ iter = ', iter\n            cost_ij = train_model(minibatch_index)\n            print titre,cost_ij\n            \n            #print sum(sum((layer3.W.get_value()**2)*((layer3.W.get_value()-1)**2)))\n\n            if (iter + 1) % 100 == 0:\n                # plt.hist(layer3.W.get_value(), 50, normed=1, facecolor='g', alpha=0.75)\n                # plt.show()\n                # compute zero-one loss on validation set\n\n\n\n\n                binary_layer1 = BinaryLeNetConvPoolLayer(\n                        layer1.W,\n                        layer1.b,\n                        rng,\n                        input=layer0.output,\n                        image_shape=(batch_size, nkerns[0], 12, 12),\n                        filter_shape=(nkerns[1], nkerns[0], 5, 5),\n                        poolsize=(2, 2)\n                    )\n\n                # the HiddenLayer being fully-connected, it operates on 2D matrices of\n                # shape (batch_size, num_pixels) (i.e matrix of rasterized images).\n                # This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),\n                # or (500, 50 * 4 * 4) = (500, 800) with the default values.\n                binary_layer2_input = binary_layer1.output.flatten(2)\n\n                layer2_binary=Binary_HiddenLayer(\n                        layer2.W,\n                        layer2.b,\n                        rng,\n                        input=binary_layer2_input,\n                        n_in=nkerns[1] * 4 * 4,\n                        n_out=500,\n                        activation=T.tanh\n                    )\n\n                layer3_binary=BinaryLogisticRegression(layer3.W,layer3.b,input=layer2_binary.output, n_in=500, n_out=10)\n\n\n                binary_validation_losses = [validate_binary_model(i) for i\n                                     in xrange(n_valid_batches)]\n                this_binary_validation_loss = numpy.mean(binary_validation_losses)\n\n                validation_losses = [validate_model(i) for i\n                                     in xrange(n_valid_batches)]\n                this_validation_loss = numpy.mean(validation_losses)\n                print('epoch %i, minibatch %i/%i, validation error %f, binary validation error %f %%' %\n                      (epoch, minibatch_index + 1, n_train_batches,\n                       this_validation_loss * 100.,\n                       this_binary_validation_loss * 100.))\n\n                # if we got the best validation score until now\n                if this_validation_loss < best_validation_loss:\n\n                    #improve patience if loss improvement is good enough\n                    if this_validation_loss < best_validation_loss *  \\\n                       improvement_threshold:\n                        patience = max(patience, iter * patience_increase)\n\n                    # save best validation score and iteration number\n                    best_validation_loss = this_validation_loss\n                    best_iter = iter\n\n                    # test it on the test set\n                    test_losses = [\n                        test_model(i)\n                        for i in xrange(n_test_batches)\n                    ]\n                    test_score = numpy.mean(test_losses)\n\n                    binary_test_losses = [\n                        test_binary_model(i)\n                        for i in xrange(n_test_batches)\n                    ]\n                    binary_test_score = numpy.mean(binary_test_losses)\n\n                    print(('     epoch %i, minibatch %i/%i, test error of '\n                           'best model %f %%  - binary test error of bet model %f %%') %\n                          (epoch, minibatch_index + 1, n_train_batches,\n                           test_score * 100.,binary_test_score*100))\n\n            	if this_validation_loss < 1.1*best_validation_loss:\n            		alpha=1.1*alpha\n                        alpha_status = 'inc'\n                        print (('Alpha augmente --> %f') % alpha)\n            	else:\n            		alpha=0.9*alpha\n            		print (('Alpha diminue --> %f') % alpha)\n                        alpha_status='dec'\n\n\n                fichier = open(titre+'-p',\"a\")\n                fichier.write('epoch %i - minibatch %i/%i - c : %f - a %f %s - t %f - '\n                            't %f %%  - bt  %f %% \\n' %\n                            (epoch, minibatch_index + 1, n_train_batches,this_validation_loss,alpha,alpha_status,\n                            (time.clock()-start_time)/60,test_score * 100.,binary_test_score*100))\n\n                fichier.close()\n\n                f = file(titre+'-'+str(iter+1)+'-p', 'wb')\n                cPickle.dump(params, f, protocol=cPickle.HIGHEST_PROTOCOL)\n                f.close()\n\n\n\n                cost=(layer3.negative_log_likelihood(y)+alpha*(cl0+cl1+cl2+cl3))\n\n                train_model = theano.function(\n                        [index],\n				        cost,\n				        updates=updates,\n				        givens={\n				            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n				            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n				        },\n				        on_unused_input='ignore',\n                    )\n\n\n\n\n\n            if patience <= iter:\n                done_looping = True\n                break\n\n    end_time = time.clock()\n    print('Optimization complete.')\n    print('Best validation score of %f %% obtained at iteration %i, '\n          'with test performance %f %%' %\n          (best_validation_loss * 100., best_iter + 1, test_score * 100.))\n    print >> sys.stderr, ('The code for file ' +\n                          os.path.split(__file__)[1] +\n                          ' ran for %.2fm' % ((end_time - start_time) / 60.))\n\nif __name__ == '__main__':\n    evaluate_lenet5()\n\n\ndef experiment(state, channel):\n    evaluate_lenet5(state.learning_rate, dataset=state.dataset)",
			"file": "conv.py",
			"file_size": 21037,
			"file_write_time": 130785719326734120,
			"settings":
			{
				"buffer_size": 21037,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"This tutorial introduces the LeNet5 neural network architecture\nusing Theano.  LeNet5 is a convolutional neural network, good for\nclassifying images. This tutorial shows how to build the architecture,\nand comes with all the hyper-parameters you need to reproduce the\npaper's MNIST results.\n\n\nThis implementation simplifies the model in the following ways:\n\n - LeNetConvPool doesn't implement location-specific gain and bias parameters\n - LeNetConvPool doesn't implement pooling by average, it implements pooling\n   by max.\n - Digit classification is implemented with a logistic regression rather than\n   an RBF network\n - LeNet5 was not fully-connected convolutions at second layer\n\nReferences:\n - Y. LeCun, L. Bottou, Y. Bengio and P. Haffner:\n   Gradient-Based Learning Applied to Document\n   Recognition, Proceedings of the IEEE, 86(11):2278-2324, November 1998.\n   http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf\n\n\"\"\"\nimport os\nimport sys\nimport time\nimport cPickle\n\nimport numpy\nimport pylab\n\nimport theano\nimport theano.tensor as T\nfrom theano.tensor.signal import downsample\nfrom theano.tensor.nnet import conv\n\nfrom logistic_sgd import BinaryLogisticRegression,LogisticRegression, load_data\nfrom mlp import HiddenLayer, Binary_HiddenLayer\nimport matplotlib.pyplot as plt\n\n\n\nclass LeNetConvPoolLayer(object):\n    \"\"\"Pool Layer of a convolutional network \"\"\"\n\n    def __init__(self, rng, input, filter_shape, image_shape, poolsize=(2, 2)):\n        \"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dtensor4\n        :param input: symbolic image tensor, of shape image_shape\n\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num input feature maps,\n                              filter height, filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num input feature maps,\n                             image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows, #cols)\n        \"\"\"\n\n        assert image_shape[1] == filter_shape[1]\n        self.input = input\n\n        # there are \"num input feature maps * filter height * filter width\"\n        # inputs to each hidden unit\n        fan_in = numpy.prod(filter_shape[1:])\n        # each unit in the lower layer receives a gradient from:\n        # \"num output feature maps * filter height * filter width\" /\n        #   pooling size\n        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /\n                   numpy.prod(poolsize))\n        # initialize weights with random weights\n        W_bound = numpy.sqrt(6. / (fan_in + fan_out))\n        self.W = theano.shared(\n            numpy.asarray(\n                rng.uniform(low=-W_bound, high=W_bound, size=filter_shape),\n                dtype=theano.config.floatX\n            ),\n            borrow=True\n        )\n\n        # the bias is a 1D tensor -- one bias per output feature map\n        b_values = numpy.zeros((filter_shape[0],), dtype=theano.config.floatX)\n        self.b = theano.shared(value=b_values, borrow=True)\n\n        # convolve input feature maps with filters\n        conv_out = conv.conv2d(\n            input=input,\n            filters=self.W,\n            filter_shape=filter_shape,\n            image_shape=image_shape\n        )\n\n        # downsample each feature map individually, using maxpooling\n        pooled_out = downsample.max_pool_2d(\n            input=conv_out,\n            ds=poolsize,\n            ignore_border=True\n        )\n\n        # add the bias term. Since the bias is a vector (1D array), we first\n        # reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will\n        # thus be broadcasted across mini-batches and feature map\n        # width & height\n        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))\n\n        # store parameters of this layer\n        self.params = [self.W, self.b]\n\nclass BinaryLeNetConvPoolLayer(object):\n    \"\"\"Pool Layer of a convolutional network \"\"\"\n\n    def __init__(self,W,b, rng, input, filter_shape, image_shape, poolsize=(2, 2)):\n        \"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dtensor4\n        :param input: symbolic image tensor, of shape image_shape\n\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num input feature maps,\n                              filter height, filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num input feature maps,\n                             image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows, #cols)\n        \"\"\"\n\n        assert image_shape[1] == filter_shape[1]\n        self.input = input\n\n        # there are \"num input feature maps * filter height * filter width\"\n        # inputs to each hidden unit\n        fan_in = numpy.prod(filter_shape[1:])\n        # each unit in the lower layer receives a gradient from:\n        # \"num output feature maps * filter height * filter width\" /\n        #   pooling size\n        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /\n                   numpy.prod(poolsize))\n        # initialize weights with random weights\n        W_bound = numpy.sqrt(6. / (fan_in + fan_out))\n        self.W = 0.01*(W>0)-0.01*(W<0)\n        # initialize the baises b as a vector of n_out 0s\n        self.b = b\n\n        # convolve input feature maps with filters\n        conv_out = conv.conv2d(\n            input=input,\n            filters=self.W,\n            filter_shape=filter_shape,\n            image_shape=image_shape\n        )\n\n        # downsample each feature map individually, using maxpooling\n        pooled_out = downsample.max_pool_2d(\n            input=conv_out,\n            ds=poolsize,\n            ignore_border=True\n        )\n\n        # add the bias term. Since the bias is a vector (1D array), we first\n        # reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will\n        # thus be broadcasted across mini-batches and feature map\n        # width & height\n        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))\n\n        # store parameters of this layer\n        self.params = [self.W, self.b]\n\n\ndef evaluate_lenet5(learning_rate=0.1, n_epochs=200,\n                    dataset='mnist.pkl.gz',\n                    nkerns=[20, 50], batch_size=500):\n    \"\"\" Demonstrates lenet on MNIST dataset\n\n    :type learning_rate: float\n    :param learning_rate: learning rate used (factor for the stochastic\n                          gradient)\n\n    :type n_epochs: int\n    :param n_epochs: maximal number of epochs to run the optimizer\n\n    :type dataset: string\n    :param dataset: path to the dataset used for training /testing (MNIST here)\n\n    :type nkerns: list of ints\n    :param nkerns: number of kernels on each layer\n    \"\"\"\n\n    rng = numpy.random.RandomState(23455)\n\n    datasets = load_data(dataset)\n\n    train_set_x, train_set_y = datasets[0]\n    valid_set_x, valid_set_y = datasets[1]\n    test_set_x, test_set_y = datasets[2]\n    \n    #print train_set_x[0,:].eval()\n    #print train_set_x.shape.eval()  #50000*784\n    #print train_set_y.shape.eval()  #50000\n    #print valid_set_x.shape.eval()  #10000*784\n    #print valid_set_y.shape.eval()  #10000\n    #print test_set_x.shape.eval()   #10000*784\n    #print test_set_y.shape.eval()   #10000\n\n    # compute number of minibatches for training, validation and testing\n    n_train_batches = train_set_x.get_value(borrow=True).shape[0]\n    n_valid_batches = valid_set_x.get_value(borrow=True).shape[0]\n    n_test_batches = test_set_x.get_value(borrow=True).shape[0]\n    n_train_batches /= batch_size\n    n_valid_batches /= batch_size\n    n_test_batches /= batch_size\n\n    # allocate symbolic variables for the data\n    index = T.lscalar()  # index to a [mini]batch\n\n    # start-snippet-1\n    x = T.matrix('x')   # the data is presented as rasterized images\n    y = T.ivector('y')  # the labels are presented as 1D vector of\n                        # [int] labels\n                         \n\n    ######################\n    # BUILD ACTUAL MODEL #\n    ######################\n    print '... building the model'\n\n    # Reshape matrix of rasterized images of shape (batch_size, 28 * 28)\n    # to a 4D tensor, compatible with our LeNetConvPoolLayer\n    # (28, 28) is the size of MNIST images.\n    layer0_input = x.reshape((batch_size, 1, 28, 28))\n\n    # Construct the first convolutional pooling layer:\n    # filtering reduces the image size to (28-5+1 , 28-5+1) = (24, 24)\n    # maxpooling reduces this further to (24/2, 24/2) = (12, 12)\n    # 4D output tensor is thus of shape (batch_size, nkerns[0], 12, 12)\n    layer0 = LeNetConvPoolLayer(\n        rng,\n        input=layer0_input,\n        image_shape=(batch_size, 1, 28, 28),\n        filter_shape=(nkerns[0], 1, 5, 5),\n        poolsize=(2, 2)\n    )\n\n\n    #outputLayer0=layer0.output\n    #array=outputLayer0.eval({x: test_set_x[0:500, :].eval()})\n    #array1=array[10, 0, :, :]\n    #array2=array[20, 0, :, :]\n    #arr=[array1,array2]\n    #pylab.imshow(arr[1], cmap=pylab.gray())\n\n    #f = pylab.figure()\n    #for i in range(1, 2):\n    #    f.add_subplot(1, 2, i)  # this line outputs images on top of each other\n    #    pylab.imshow(arr[i-1],cmap=pylab.gray())\n    #pylab.title('Double image')\n    #pylab.show()\n    \n   \n\n    # Construct the second convolutional pooling layer\n    # filtering reduces the image size to (12-5+1, 12-5+1) = (8, 8)\n    # maxpooling reduces this further to (8/2, 8/2) = (4, 4)\n    # 4D output tensor is thus of shape (batch_size, nkerns[1], 4, 4)\n    layer1 = LeNetConvPoolLayer(\n        rng,\n        input=layer0.output,\n        image_shape=(batch_size, nkerns[0], 12, 12),\n        filter_shape=(nkerns[1], nkerns[0], 5, 5),\n        poolsize=(2, 2)\n    )\n\n    # the HiddenLayer being fully-connected, it operates on 2D matrices of\n    # shape (batch_size, num_pixels) (i.e matrix of rasterized images).\n    # This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),\n    # or (500, 50 * 4 * 4) = (500, 800) with the default values.\n    layer2_input = layer1.output.flatten(2)\n\n    # construct a fully-connected sigmoidal layer\n    layer2 = HiddenLayer(\n        rng,\n        input=layer2_input,\n        n_in=nkerns[1] * 4 * 4,\n        n_out=500,\n        activation=T.tanh\n    )\n\n\n\n    # classify the values of the fully-connected sigmoidal layer\n    layer3 = LogisticRegression(input=layer2.output, n_in=500, n_out=10)\n    #layer3_binary = LogisticRegression(input=layer2.output, n_in=500, n_out=10)\n    #layer3_binary.W=1*(layer3_binary.W>0.5)\n    layer3_binary=BinaryLogisticRegression(layer3.W,layer3.b,input=layer2.output, n_in=500, n_out=10)\n\n    # the cost we minimize during training is the NLL of the model\n    #cost = layer3.negative_log_likelihood(y)\n\n    alpha=1;\n    cl0=(((layer0.W+0.01)**2)*(layer0.W-0.01)**2).sum()\n    cl1=(((layer1.W+0.01)**2)*(layer1.W-0.01)**2).sum()\n    cl2=(((layer2.W+0.01)**2)*(layer2.W-0.01)**2).sum()\n    cl3=(((layer3.W+0.01)**2)*(layer3.W-0.01)**2).sum()\n\n\n    cost=(layer3.negative_log_likelihood(y)+alpha*(cl0+cl1+cl2+cl3))\n\n    # create a function to compute the mistakes that are made by the model\n    test_model = theano.function(\n        [index],\n        layer3.errors(y),\n        givens={\n            x: test_set_x[index * batch_size: (index + 1) * batch_size],\n            y: test_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    test_binary_model = theano.function(\n        [index],\n        layer3_binary.errors(y),\n        givens={\n            x: test_set_x[index * batch_size: (index + 1) * batch_size],\n            y: test_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    validate_model = theano.function(\n        [index],\n        layer3.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n            y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    validate_binary_model = theano.function(\n        [index],\n        layer3_binary.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n            y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    # create a list of all model parameters to be fit by gradient descent\n    params = layer3.params + layer2.params + layer1.params + layer0.params\n\n    # create a list of gradients for all model parameters\n    grads = T.grad(cost, params)\n    ##grads=params;\n\n\n    # train_model is a function that updates the model parameters by\n    # SGD Since this model has many parameters, it would be tedious to\n    # manually create an update rule for each model parameter. We thus\n    # create the updates list by automatically looping over all\n    # (params[i], grads[i]) pairs.\n    updates = [\n        (param_i, param_i - learning_rate * grad_i)\n        for param_i, grad_i in zip(params, grads)\n    ]\n\n    train_model = theano.function(\n        [index],\n        cost,\n        updates=updates,\n        givens={\n            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n        },\n        on_unused_input='ignore',\n\n    )\n    # end-snippet-1\n\n    ###############\n    # TRAIN MODEL #\n    ###############\n    print '... training'\n    titre = 'varAll'\n\n    fichier = open(titre+'-p',\"a\")\n    fichier.write('---- New Train ---- \\n' %\n                ())\n\n    fichier.close()\n\n    # early-stopping parameters\n    patience = 10000  # look as this many examples regardless\n    patience_increase = 2  # wait this much longer when a new best is\n                           # found\n    improvement_threshold = 0.995  # a relative improvement of this much is\n                                   # considered significant\n    validation_frequency = min(n_train_batches, patience / 2)\n                                  # go through this many\n                                  # minibatche before checking the network\n                                  # on the validation set; in this case we\n                                  # check every epoch\n\n    best_validation_loss = numpy.inf\n    best_iter = 0\n    test_score = 0.\n    start_time = time.clock()\n    \n    epoch = 0\n    done_looping = False\n   \n    while (epoch < n_epochs) and (not done_looping):\n        epoch = epoch + 1\n        for minibatch_index in xrange(n_train_batches):\n            \n            #pylab.hist(layer3.W.get_value(), bins=50)\n            #pylab.show()\n            \n            \n\n            iter = (epoch - 1) * n_train_batches + minibatch_index\n\n            if iter % 100 == 0:\n                print 'training @ iter = ', iter\n            cost_ij = train_model(minibatch_index)\n            print titre,cost_ij\n            \n            #print sum(sum((layer3.W.get_value()**2)*((layer3.W.get_value()-1)**2)))\n\n            if (iter + 1) % 100 == 0:\n                # plt.hist(layer3.W.get_value(), 50, normed=1, facecolor='g', alpha=0.75)\n                # plt.show()\n                # compute zero-one loss on validation set\n\n                binary_layer0 = BinaryLeNetConvPoolLayer(\n                        layer0.W,\n                        layer0.b,\n                        rng,\n                        input=layer0_input,\n                        image_shape=(batch_size, 1, 28, 28),\n                        filter_shape=(nkerns[0], 1, 5, 5),\n                        poolsize=(2, 2)\n                    )\n\n\n                binary_layer1 = BinaryLeNetConvPoolLayer(\n                        layer1.W,\n                        layer1.b,\n                        rng,\n                        input=binary_layer0.output,\n                        image_shape=(batch_size, nkerns[0], 12, 12),\n                        filter_shape=(nkerns[1], nkerns[0], 5, 5),\n                        poolsize=(2, 2)\n                    )\n\n                # the HiddenLayer being fully-connected, it operates on 2D matrices of\n                # shape (batch_size, num_pixels) (i.e matrix of rasterized images).\n                # This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),\n                # or (500, 50 * 4 * 4) = (500, 800) with the default values.\n                binary_layer2_input = binary_layer1.output.flatten(2)\n\n                layer2_binary=Binary_HiddenLayer(\n                        layer2.W,\n                        layer2.b,\n                        rng,\n                        input=binary_layer2_input,\n                        n_in=nkerns[1] * 4 * 4,\n                        n_out=500,\n                        activation=T.tanh\n                    )\n\n                layer3_binary=BinaryLogisticRegression(layer3.W,layer3.b,input=layer2_binary.output, n_in=500, n_out=10)\n\n\n                binary_validation_losses = [validate_binary_model(i) for i\n                                     in xrange(n_valid_batches)]\n                this_binary_validation_loss = numpy.mean(binary_validation_losses)\n\n                validation_losses = [validate_model(i) for i\n                                     in xrange(n_valid_batches)]\n                this_validation_loss = numpy.mean(validation_losses)\n                print('epoch %i, minibatch %i/%i, validation error %f, binary validation error %f %%' %\n                      (epoch, minibatch_index + 1, n_train_batches,\n                       this_validation_loss * 100.,\n                       this_binary_validation_loss * 100.))\n\n                # if we got the best validation score until now\n                if this_validation_loss < best_validation_loss:\n\n                    #improve patience if loss improvement is good enough\n                    if this_validation_loss < best_validation_loss *  \\\n                       improvement_threshold:\n                        patience = max(patience, iter * patience_increase)\n\n                    # save best validation score and iteration number\n                    best_validation_loss = this_validation_loss\n                    best_iter = iter\n\n                    # test it on the test set\n                    test_losses = [\n                        test_model(i)\n                        for i in xrange(n_test_batches)\n                    ]\n                    test_score = numpy.mean(test_losses)\n\n                    binary_test_losses = [\n                        test_binary_model(i)\n                        for i in xrange(n_test_batches)\n                    ]\n                    binary_test_score = numpy.mean(binary_test_losses)\n\n                    print(('     epoch %i, minibatch %i/%i, test error of '\n                           'best model %f %%  - binary test error of bet model %f %%') %\n                          (epoch, minibatch_index + 1, n_train_batches,\n                           test_score * 100.,binary_test_score*100))\n\n            	if this_validation_loss < 1.1*best_validation_loss:\n                    alpha=1.1*alpha\n                    alpha_status = 'inc'\n                    print (('Alpha augmente --> %f') % alpha)\n                else:\n                    alpha=0.9*alpha\n                    print (('Alpha diminue --> %f') % alpha)\n                    alpha_status='dec'\n\n\n                fichier = open(titre+'-p',\"a\")\n                fichier.write('epoch %i - minibatch %i/%i - c : %f - a %f %s - t %f - '\n                            't %f %%  - bt  %f %% \\n' %\n                            (epoch, minibatch_index + 1, n_train_batches,this_validation_loss,alpha,alpha_status,\n                            (time.clock()-start_time)/60,test_score * 100.,binary_test_score*100))\n\n                fichier.close()\n\n                f = file(titre+'-'+str(iter+1)+'-p', 'wb')\n                cPickle.dump(params, f, protocol=cPickle.HIGHEST_PROTOCOL)\n                f.close()\n\n\n                cost=(layer3.negative_log_likelihood(y)+alpha*(cl0+cl1+cl2+cl3))\n\n                train_model = theano.function(\n                        [index],\n				        cost,\n				        updates=updates,\n				        givens={\n				            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n				            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n				        },\n				        on_unused_input='ignore',\n                    )\n\n\n\n\n\n            if patience <= iter:\n                done_looping = True\n                break\n\n    end_time = time.clock()\n    print('Optimization complete.')\n    print('Best validation score of %f %% obtained at iteration %i, '\n          'with test performance %f %%' %\n          (best_validation_loss * 100., best_iter + 1, test_score * 100.))\n    print >> sys.stderr, ('The code for file ' +\n                          os.path.split(__file__)[1] +\n                          ' ran for %.2fm' % ((end_time - start_time) / 60.))\n\nif __name__ == '__main__':\n    evaluate_lenet5()\n\n\ndef experiment(state, channel):\n    evaluate_lenet5(state.learning_rate, dataset=state.dataset)",
			"file": "convAll.py",
			"file_size": 21472,
			"file_write_time": 130785719706854111,
			"settings":
			{
				"buffer_size": 21472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/guillaume/Dropbox/.conf/README.txt",
			"settings":
			{
				"buffer_size": 1369,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "code/*.pyc\ncode/*_plots\ncode/tmp*\ncode/midi\ncode/rnnslu\ndata/atis.*\ndata/mnist.pkl.gz\ndata/mnist_py3k.pkl.gz\ndata/Nottingham.zip\ndata/Nottingham\ndata/midi.zip\nhtml\n*.pyc\n*~\n*.swp\n*-p\n",
			"file": ".gitignore",
			"file_size": 183,
			"file_write_time": 130785715032654219,
			"settings":
			{
				"buffer_size": 183,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "W\nb\nW\nb\n<TensorType(float64, 4D)>\n<TensorType(float64, vector)>\n<TensorType(float64, 4D)>\n<TensorType(float64, vector)>(W,)\n(b,)\n(W,)\n(b,)\n(<TensorType(float64, 4D)>,)\n(<TensorType(float64, vector)>,)\n(<TensorType(float64, 4D)>,)\n(<TensorType(float64, vector)>,)<TensorType(float64, 4D)>\n<TensorType(float64, vector)>",
			"file": "inv-p",
			"file_size": 317,
			"file_write_time": 130785689268214813,
			"settings":
			{
				"buffer_size": 317,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"\nThis tutorial introduces the multilayer perceptron using Theano.\n\n A multilayer perceptron is a logistic regressor where\ninstead of feeding the input to the logistic regression you insert a\nintermediate layer, called the hidden layer, that has a nonlinear\nactivation function (usually tanh or sigmoid) . One can use many such\nhidden layers making the architecture deep. The tutorial will also tackle\nthe problem of MNIST digit classification.\n\n.. math::\n\n    f(x) = G( b^{(2)} + W^{(2)}( s( b^{(1)} + W^{(1)} x))),\n\nReferences:\n\n    - textbooks: \"Pattern Recognition and Machine Learning\" -\n                 Christopher M. Bishop, section 5\n\n\"\"\"\n__docformat__ = 'restructedtext en'\n\n\nimport os\nimport sys\nimport time\n\nimport numpy\n\nimport theano\nimport theano.tensor as T\n\n\nfrom logistic_sgd import LogisticRegression, load_data\n\n\n# start-snippet-1\nclass HiddenLayer(object):\n    def __init__(self, rng, input, n_in, n_out, W=None, b=None,\n                 activation=T.tanh):\n        \"\"\"\n        Typical hidden layer of a MLP: units are fully-connected and have\n        sigmoidal activation function. Weight matrix W is of shape (n_in,n_out)\n        and the bias vector b is of shape (n_out,).\n\n        NOTE : The nonlinearity used here is tanh\n\n        Hidden unit activation is given by: tanh(dot(input,W) + b)\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dmatrix\n        :param input: a symbolic tensor of shape (n_examples, n_in)\n\n        :type n_in: int\n        :param n_in: dimensionality of input\n\n        :type n_out: int\n        :param n_out: number of hidden units\n\n        :type activation: theano.Op or function\n        :param activation: Non linearity to be applied in the hidden\n                           layer\n        \"\"\"\n        self.input = input\n        # end-snippet-1\n\n        # `W` is initialized with `W_values` which is uniformely sampled\n        # from sqrt(-6./(n_in+n_hidden)) and sqrt(6./(n_in+n_hidden))\n        # for tanh activation function\n        # the output of uniform if converted using asarray to dtype\n        # theano.config.floatX so that the code is runable on GPU\n        # Note : optimal initialization of weights is dependent on the\n        #        activation function used (among other things).\n        #        For example, results presented in [Xavier10] suggest that you\n        #        should use 4 times larger initial weights for sigmoid\n        #        compared to tanh\n        #        We have no info for other function, so we use the same as\n        #        tanh.\n        if W is None:\n            W_values = numpy.asarray(\n                rng.uniform(\n                    low=-numpy.sqrt(6. / (n_in + n_out)),\n                    high=numpy.sqrt(6. / (n_in + n_out)),\n                    size=(n_in, n_out)\n                ),\n                dtype=theano.config.floatX\n            )\n            if activation == theano.tensor.nnet.sigmoid:\n                W_values *= 4\n\n            W = theano.shared(value=W_values, name='W', borrow=True)\n\n        if b is None:\n            b_values = numpy.zeros((n_out,), dtype=theano.config.floatX)\n            b = theano.shared(value=b_values, name='b', borrow=True)\n\n        self.W = W\n        self.b = b\n\n        lin_output = T.dot(input, self.W) + self.b\n        self.output = (\n            lin_output if activation is None\n            else activation(lin_output)\n        )\n        # parameters of the model\n        self.params = [self.W, self.b]\n\nclass Binary_HiddenLayer(object):\n    def __init__(self,W,b, rng, input, n_in, n_out, \n                 activation=T.tanh):\n        \"\"\"\n        Typical hidden layer of a MLP: units are fully-connected and have\n        sigmoidal activation function. Weight matrix W is of shape (n_in,n_out)\n        and the bias vector b is of shape (n_out,).\n\n        NOTE : The nonlinearity used here is tanh\n\n        Hidden unit activation is given by: tanh(dot(input,W) + b)\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dmatrix\n        :param input: a symbolic tensor of shape (n_examples, n_in)\n\n        :type n_in: int\n        :param n_in: dimensionality of input\n\n        :type n_out: int\n        :param n_out: number of hidden units\n\n        :type activation: theano.Op or function\n        :param activation: Non linearity to be applied in the hidden\n                           layer\n        \"\"\"\n        self.input = input\n        # end-snippet-1\n\n        # `W` is initialized with `W_values` which is uniformely sampled\n        # from sqrt(-6./(n_in+n_hidden)) and sqrt(6./(n_in+n_hidden))\n        # for tanh activation function\n        # the output of uniform if converted using asarray to dtype\n        # theano.config.floatX so that the code is runable on GPU\n        # Note : optimal initialization of weights is dependent on the\n        #        activation function used (among other things).\n        #        For example, results presented in [Xavier10] suggest that you\n        #        should use 4 times larger initial weights for sigmoid\n        #        compared to tanh\n        #        We have no info for other function, so we use the same as\n        #        tanh.\n        \n        self.W = 0.01*(W>0)-0.01*(W<0)\n        self.b = b\n\n        lin_output = T.dot(input, self.W) + self.b\n        self.output = (\n            lin_output if activation is None\n            else activation(lin_output)\n        )\n        # parameters of the model\n        self.params = [self.W, self.b]\n\n# start-snippet-2\nclass MLP(object):\n    \"\"\"Multi-Layer Perceptron Class\n\n    A multilayer perceptron is a feedforward artificial neural network model\n    that has one layer or more of hidden units and nonlinear activations.\n    Intermediate layers usually have as activation function tanh or the\n    sigmoid function (defined here by a ``HiddenLayer`` class)  while the\n    top layer is a softmax layer (defined here by a ``LogisticRegression``\n    class).\n    \"\"\"\n\n    def __init__(self, rng, input, n_in, n_hidden, n_out):\n        \"\"\"Initialize the parameters for the multilayer perceptron\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.TensorType\n        :param input: symbolic variable that describes the input of the\n        architecture (one minibatch)\n\n        :type n_in: int\n        :param n_in: number of input units, the dimension of the space in\n        which the datapoints lie\n\n        :type n_hidden: int\n        :param n_hidden: number of hidden units\n\n        :type n_out: int\n        :param n_out: number of output units, the dimension of the space in\n        which the labels lie\n\n        \"\"\"\n\n        # Since we are dealing with a one hidden layer MLP, this will translate\n        # into a HiddenLayer with a tanh activation function connected to the\n        # LogisticRegression layer; the activation function can be replaced by\n        # sigmoid or any other nonlinear function\n        self.hiddenLayer = HiddenLayer(\n            rng=rng,\n            input=input,\n            n_in=n_in,\n            n_out=n_hidden,\n            activation=T.tanh\n        )\n\n        # The logistic regression layer gets as input the hidden units\n        # of the hidden layer\n        self.logRegressionLayer = LogisticRegression(\n            input=self.hiddenLayer.output,\n            n_in=n_hidden,\n            n_out=n_out\n        )\n        # end-snippet-2 start-snippet-3\n        # L1 norm ; one regularization option is to enforce L1 norm to\n        # be small\n        self.L1 = (\n            abs(self.hiddenLayer.W).sum()\n            + abs(self.logRegressionLayer.W).sum()\n        )\n\n        # square of L2 norm ; one regularization option is to enforce\n        # square of L2 norm to be small\n        self.L2_sqr = (\n            (self.hiddenLayer.W ** 2).sum()\n            + (self.logRegressionLayer.W ** 2).sum()\n        )\n\n        # negative log likelihood of the MLP is given by the negative\n        # log likelihood of the output of the model, computed in the\n        # logistic regression layer\n        self.negative_log_likelihood = (\n            self.logRegressionLayer.negative_log_likelihood\n        )\n        # same holds for the function computing the number of errors\n        self.errors = self.logRegressionLayer.errors\n\n        # the parameters of the model are the parameters of the two layer it is\n        # made out of\n        self.params = self.hiddenLayer.params + self.logRegressionLayer.params\n        # end-snippet-3\n\n\ndef test_mlp(learning_rate=0.01, L1_reg=0.00, L2_reg=0.0001, n_epochs=1000,\n             dataset='mnist.pkl.gz', batch_size=20, n_hidden=500):\n    \"\"\"\n    Demonstrate stochastic gradient descent optimization for a multilayer\n    perceptron\n\n    This is demonstrated on MNIST.\n\n    :type learning_rate: float\n    :param learning_rate: learning rate used (factor for the stochastic\n    gradient\n\n    :type L1_reg: float\n    :param L1_reg: L1-norm's weight when added to the cost (see\n    regularization)\n\n    :type L2_reg: float\n    :param L2_reg: L2-norm's weight when added to the cost (see\n    regularization)\n\n    :type n_epochs: int\n    :param n_epochs: maximal number of epochs to run the optimizer\n\n    :type dataset: string\n    :param dataset: the path of the MNIST dataset file from\n                 http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz\n\n\n   \"\"\"\n    datasets = load_data(dataset)\n\n    train_set_x, train_set_y = datasets[0]\n    valid_set_x, valid_set_y = datasets[1]\n    test_set_x, test_set_y = datasets[2]\n\n    # compute number of minibatches for training, validation and testing\n    n_train_batches = train_set_x.get_value(borrow=True).shape[0] / batch_size\n    n_valid_batches = valid_set_x.get_value(borrow=True).shape[0] / batch_size\n    n_test_batches = test_set_x.get_value(borrow=True).shape[0] / batch_size\n\n    ######################\n    # BUILD ACTUAL MODEL #\n    ######################\n    print '... building the model'\n\n    # allocate symbolic variables for the data\n    index = T.lscalar()  # index to a [mini]batch\n    x = T.matrix('x')  # the data is presented as rasterized images\n    y = T.ivector('y')  # the labels are presented as 1D vector of\n                        # [int] labels\n\n    rng = numpy.random.RandomState(1234)\n\n    # construct the MLP class\n    classifier = MLP(\n        rng=rng,\n        input=x,\n        n_in=28 * 28,\n        n_hidden=n_hidden,\n        n_out=10\n    )\n\n    # start-snippet-4\n    # the cost we minimize during training is the negative log likelihood of\n    # the model plus the regularization terms (L1 and L2); cost is expressed\n    # here symbolically\n    cost = (\n        classifier.negative_log_likelihood(y)\n        + L1_reg * classifier.L1\n        + L2_reg * classifier.L2_sqr\n    )\n    # end-snippet-4\n\n    # compiling a Theano function that computes the mistakes that are made\n    # by the model on a minibatch\n    test_model = theano.function(\n        inputs=[index],\n        outputs=classifier.errors(y),\n        givens={\n            x: test_set_x[index * batch_size:(index + 1) * batch_size],\n            y: test_set_y[index * batch_size:(index + 1) * batch_size]\n        }\n    )\n\n    validate_model = theano.function(\n        inputs=[index],\n        outputs=classifier.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size:(index + 1) * batch_size],\n            y: valid_set_y[index * batch_size:(index + 1) * batch_size]\n        }\n    )\n\n    # start-snippet-5\n    # compute the gradient of cost with respect to theta (sotred in params)\n    # the resulting gradients will be stored in a list gparams\n    gparams = [T.grad(cost, param) for param in classifier.params]\n\n    # specify how to update the parameters of the model as a list of\n    # (variable, update expression) pairs\n\n    # given two list the zip A = [a1, a2, a3, a4] and B = [b1, b2, b3, b4] of\n    # same length, zip generates a list C of same size, where each element\n    # is a pair formed from the two lists :\n    #    C = [(a1, b1), (a2, b2), (a3, b3), (a4, b4)]\n    updates = [\n        (param, param - learning_rate * gparam)\n        for param, gparam in zip(classifier.params, gparams)\n    ]\n\n    # compiling a Theano function `train_model` that returns the cost, but\n    # in the same time updates the parameter of the model based on the rules\n    # defined in `updates`\n    train_model = theano.function(\n        inputs=[index],\n        outputs=cost,\n        updates=updates,\n        givens={\n            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n    # end-snippet-5\n\n    ###############\n    # TRAIN MODEL #\n    ###############\n    print '... training'\n\n    # early-stopping parameters\n    patience = 10000  # look as this many examples regardless\n    patience_increase = 2  # wait this much longer when a new best is\n                           # found\n    improvement_threshold = 0.995  # a relative improvement of this much is\n                                   # considered significant\n    validation_frequency = min(n_train_batches, patience / 2)\n                                  # go through this many\n                                  # minibatche before checking the network\n                                  # on the validation set; in this case we\n                                  # check every epoch\n\n    best_validation_loss = numpy.inf\n    best_iter = 0\n    test_score = 0.\n    start_time = time.clock()\n\n    epoch = 0\n    done_looping = False\n\n    while (epoch < n_epochs) and (not done_looping):\n        epoch = epoch + 1\n        for minibatch_index in xrange(n_train_batches):\n\n            minibatch_avg_cost = train_model(minibatch_index)\n            # iteration number\n            iter = (epoch - 1) * n_train_batches + minibatch_index\n\n            if (iter + 1) % validation_frequency == 0:\n                # compute zero-one loss on validation set\n                validation_losses = [validate_model(i) for i\n                                     in xrange(n_valid_batches)]\n                this_validation_loss = numpy.mean(validation_losses)\n\n                print(\n                    'epoch %i, minibatch %i/%i, validation error %f %%' %\n                    (\n                        epoch,\n                        minibatch_index + 1,\n                        n_train_batches,\n                        this_validation_loss * 100.\n                    )\n                )\n\n                # if we got the best validation score until now\n                if this_validation_loss < best_validation_loss:\n                    #improve patience if loss improvement is good enough\n                    if (\n                        this_validation_loss < best_validation_loss *\n                        improvement_threshold\n                    ):\n                        patience = max(patience, iter * patience_increase)\n\n                    best_validation_loss = this_validation_loss\n                    best_iter = iter\n\n                    # test it on the test set\n                    test_losses = [test_model(i) for i\n                                   in xrange(n_test_batches)]\n                    test_score = numpy.mean(test_losses)\n\n                    print(('     epoch %i, minibatch %i/%i, test error of '\n                           'best model %f %%') %\n                          (epoch, minibatch_index + 1, n_train_batches,\n                           test_score * 100.))\n\n            if patience <= iter:\n                done_looping = True\n                break\n\n    end_time = time.clock()\n    print(('Optimization complete. Best validation score of %f %% '\n           'obtained at iteration %i, with test performance %f %%') %\n          (best_validation_loss * 100., best_iter + 1, test_score * 100.))\n    print >> sys.stderr, ('The code for file ' +\n                          os.path.split(__file__)[1] +\n                          ' ran for %.2fm' % ((end_time - start_time) / 60.))\n\n\nif __name__ == '__main__':\n    test_mlp()\n",
			"file": "mlp.py",
			"file_size": 16274,
			"file_write_time": 130785678005895073,
			"settings":
			{
				"buffer_size": 16274,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"\nThis tutorial introduces logistic regression using Theano and stochastic\ngradient descent.\n\nLogistic regression is a probabilistic, linear classifier. It is parametrized\nby a weight matrix :math:`W` and a bias vector :math:`b`. Classification is\ndone by projecting data points onto a set of hyperplanes, the distance to\nwhich is used to determine a class membership probability.\n\nMathematically, this can be written as:\n\n.. math::\n  P(Y=i|x, W,b) &= softmax_i(W x + b) \\\\\n                &= \\frac {e^{W_i x + b_i}} {\\sum_j e^{W_j x + b_j}}\n\n\nThe output of the model or prediction is then done by taking the argmax of\nthe vector whose i'th element is P(Y=i|x).\n\n.. math::\n\n  y_{pred} = argmax_i P(Y=i|x,W,b)\n\n\nThis tutorial presents a stochastic gradient descent optimization method\nsuitable for large datasets.\n\n\nReferences:\n\n    - textbooks: \"Pattern Recognition and Machine Learning\" -\n                 Christopher M. Bishop, section 4.3.2\n\n\"\"\"\n__docformat__ = 'restructedtext en'\n\nimport cPickle\nimport gzip\nimport os\nimport sys\nimport time\n\nimport numpy\n\nimport theano\nimport theano.tensor as T\n\n\nclass LogisticRegression(object):\n    \"\"\"Multi-class Logistic Regression Class\n\n    The logistic regression is fully described by a weight matrix :math:`W`\n    and bias vector :math:`b`. Classification is done by projecting data\n    points onto a set of hyperplanes, the distance to which is used to\n    determine a class membership probability.\n    \"\"\"\n\n    def __init__(self, input, n_in, n_out):\n        \"\"\" Initialize the parameters of the logistic regression\n\n        :type input: theano.tensor.TensorType\n        :param input: symbolic variable that describes the input of the\n                      architecture (one minibatch)\n\n        :type n_in: int\n        :param n_in: number of input units, the dimension of the space in\n                     which the datapoints lie\n\n        :type n_out: int\n        :param n_out: number of output units, the dimension of the space in\n                      which the labels lie\n\n        \"\"\"\n        # start-snippet-1\n        # initialize with 0 the weights W as a matrix of shape (n_in, n_out)\n        self.W = theano.shared(\n            value=numpy.zeros(\n                (n_in, n_out),\n                dtype=theano.config.floatX\n            ),\n            name='W',\n            borrow=True\n        )\n        # initialize the baises b as a vector of n_out 0s\n        self.b = theano.shared(\n            value=numpy.zeros(\n                (n_out,),\n                dtype=theano.config.floatX\n            ),\n            name='b',\n            borrow=True\n        )\n\n        self.L1 = (\n            abs(self.W).sum()\n        )\n\n        # symbolic expression for computing the matrix of class-membership\n        # probabilities\n        # Where:\n        # W is a matrix where column-k represent the separation hyper plain for\n        # class-k\n        # x is a matrix where row-j  represents input training sample-j\n        # b is a vector where element-k represent the free parameter of hyper\n        # plain-k\n        self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)\n\n        # symbolic description of how to compute prediction as class whose\n        # probability is maximal\n        self.y_pred = T.argmax(self.p_y_given_x, axis=1)\n        # end-snippet-1\n\n        # parameters of the model\n        self.params = [self.W, self.b]\n\n    def cf(self,y):\n            return 10*T.sum(T.sum(self.W**2*(self.W-1)**2))-T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[0]), y])\n          \n\n    def negative_log_likelihood(self, y):\n        \"\"\"Return the mean of the negative log-likelihood of the prediction\n        of this model under a given target distribution.\n\n        .. math::\n\n            \\frac{1}{|\\mathcal{D}|} \\mathcal{L} (\\theta=\\{W,b\\}, \\mathcal{D}) =\n            \\frac{1}{|\\mathcal{D}|} \\sum_{i=0}^{|\\mathcal{D}|}\n                \\log(P(Y=y^{(i)}|x^{(i)}, W,b)) \\\\\n            \\ell (\\theta=\\{W,b\\}, \\mathcal{D})\n\n        :type y: theano.tensor.TensorType\n        :param y: corresponds to a vector that gives for each example the\n                  correct label\n\n        Note: we use the mean instead of the sum so that\n              the learning rate is less dependent on the batch size\n        \"\"\"\n        # start-snippet-2\n        # y.shape[0] is (symbolically) the number of rows in y, i.e.,\n        # number of examples (call it n) in the minibatch\n        # T.arange(y.shape[0]) is a symbolic vector which will contain\n        # [0,1,2,... n-1] T.log(self.p_y_given_x) is a matrix of\n        # Log-Probabilities (call it LP) with one row per example and\n        # one column per class LP[T.arange(y.shape[0]),y] is a vector\n        # v containing [LP[0,y[0]], LP[1,y[1]], LP[2,y[2]], ...,\n        # LP[n-1,y[n-1]]] and T.mean(LP[T.arange(y.shape[0]),y]) is\n        # the mean (across minibatch examples) of the elements in v,\n        # i.e., the mean log-likelihood across the minibatch.\n        return -T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[0]), y])\n        \n        # end-snippet-2\n\n    def errors(self, y):\n        \"\"\"Return a float representing the number of errors in the minibatch\n        over the total number of examples of the minibatch ; zero one\n        loss over the size of the minibatch\n\n        :type y: theano.tensor.TensorType\n        :param y: corresponds to a vector that gives for each example the\n                  correct label\n        \"\"\"\n\n        # check if y has same dimension of y_pred\n        if y.ndim != self.y_pred.ndim:\n            raise TypeError(\n                'y should have the same shape as self.y_pred',\n                ('y', y.type, 'y_pred', self.y_pred.type)\n            )\n        # check if y is of the correct datatype\n        if y.dtype.startswith('int'):\n            # the T.neq operator returns a vector of 0s and 1s, where 1\n            # represents a mistake in prediction\n            return T.mean(T.neq(self.y_pred, y))\n        else:\n            raise NotImplementedError()\n\n\nclass BinaryLogisticRegression(object):\n    \"\"\"Multi-class Logistic Regression Class\n\n    The logistic regression is fully described by a weight matrix :math:`W`\n    and bias vector :math:`b`. Classification is done by projecting data\n    points onto a set of hyperplanes, the distance to which is used to\n    determine a class membership probability.\n    \"\"\"\n\n    def __init__(self, W,b,input, n_in, n_out):\n        \"\"\" Initialize the parameters of the logistic regression\n\n        :type input: theano.tensor.TensorType\n        :param input: symbolic variable that describes the input of the\n                      architecture (one minibatch)\n\n        :type n_in: int\n        :param n_in: number of input units, the dimension of the space in\n                     which the datapoints lie\n\n        :type n_out: int\n        :param n_out: number of output units, the dimension of the space in\n                      which the labels lie\n\n        \"\"\"\n        # start-snippet-1\n        # initialize with 0 the weights W as a matrix of shape (n_in, n_out)\n        self.W = 0.01*(W>0)-0.01*(W<0)\n        # initialize the baises b as a vector of n_out 0s\n        self.b = b\n\n        self.L1 = (\n            abs(self.W).sum()\n        )\n\n        # symbolic expression for computing the matrix of class-membership\n        # probabilities\n        # Where:\n        # W is a matrix where column-k represent the separation hyper plain for\n        # class-k\n        # x is a matrix where row-j  represents input training sample-j\n        # b is a vector where element-k represent the free parameter of hyper\n        # plain-k\n        self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)\n\n        # symbolic description of how to compute prediction as class whose\n        # probability is maximal\n        self.y_pred = T.argmax(self.p_y_given_x, axis=1)\n        # end-snippet-1\n\n        # parameters of the model\n        self.params = [self.W, self.b]\n\n    def cf(self,y):\n            return 10*T.sum(T.sum(self.W**2*(self.W-1)**2))-T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[0]), y])\n          \n\n    def negative_log_likelihood(self, y):\n        \"\"\"Return the mean of the negative log-likelihood of the prediction\n        of this model under a given target distribution.\n\n        .. math::\n\n            \\frac{1}{|\\mathcal{D}|} \\mathcal{L} (\\theta=\\{W,b\\}, \\mathcal{D}) =\n            \\frac{1}{|\\mathcal{D}|} \\sum_{i=0}^{|\\mathcal{D}|}\n                \\log(P(Y=y^{(i)}|x^{(i)}, W,b)) \\\\\n            \\ell (\\theta=\\{W,b\\}, \\mathcal{D})\n\n        :type y: theano.tensor.TensorType\n        :param y: corresponds to a vector that gives for each example the\n                  correct label\n\n        Note: we use the mean instead of the sum so that\n              the learning rate is less dependent on the batch size\n        \"\"\"\n        # start-snippet-2\n        # y.shape[0] is (symbolically) the number of rows in y, i.e.,\n        # number of examples (call it n) in the minibatch\n        # T.arange(y.shape[0]) is a symbolic vector which will contain\n        # [0,1,2,... n-1] T.log(self.p_y_given_x) is a matrix of\n        # Log-Probabilities (call it LP) with one row per example and\n        # one column per class LP[T.arange(y.shape[0]),y] is a vector\n        # v containing [LP[0,y[0]], LP[1,y[1]], LP[2,y[2]], ...,\n        # LP[n-1,y[n-1]]] and T.mean(LP[T.arange(y.shape[0]),y]) is\n        # the mean (across minibatch examples) of the elements in v,\n        # i.e., the mean log-likelihood across the minibatch.\n        return -T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[0]), y])\n        \n        # end-snippet-2\n\n    def errors(self, y):\n        \"\"\"Return a float representing the number of errors in the minibatch\n        over the total number of examples of the minibatch ; zero one\n        loss over the size of the minibatch\n\n        :type y: theano.tensor.TensorType\n        :param y: corresponds to a vector that gives for each example the\n                  correct label\n        \"\"\"\n\n        # check if y has same dimension of y_pred\n        if y.ndim != self.y_pred.ndim:\n            raise TypeError(\n                'y should have the same shape as self.y_pred',\n                ('y', y.type, 'y_pred', self.y_pred.type)\n            )\n        # check if y is of the correct datatype\n        if y.dtype.startswith('int'):\n            # the T.neq operator returns a vector of 0s and 1s, where 1\n            # represents a mistake in prediction\n            return T.mean(T.neq(self.y_pred, y))\n        else:\n            raise NotImplementedError()\n\n\ndef load_data(dataset):\n    ''' Loads the dataset\n\n    :type dataset: string\n    :param dataset: the path to the dataset (here MNIST)\n    '''\n\n    #############\n    # LOAD DATA #\n    #############\n\n    # Download the MNIST dataset if it is not present\n    data_dir, data_file = os.path.split(dataset)\n    if data_dir == \"\" and not os.path.isfile(dataset):\n        # Check if dataset is in the data directory.\n        new_path = os.path.join(\n            os.path.split(__file__)[0],\n            \"..\",\n            \"data\",\n            dataset\n        )\n        if os.path.isfile(new_path) or data_file == 'mnist.pkl.gz':\n            dataset = new_path\n\n    if (not os.path.isfile(dataset)) and data_file == 'mnist.pkl.gz':\n        import urllib\n        origin = (\n            'http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz'\n        )\n        print 'Downloading data from %s' % origin\n        urllib.urlretrieve(origin, dataset)\n\n    print '... loading data'\n\n    # Load the dataset\n    f = gzip.open(dataset, 'rb')\n    train_set, valid_set, test_set = cPickle.load(f)\n    f.close()\n    #train_set, valid_set, test_set format: tuple(input, target)\n    #input is an numpy.ndarray of 2 dimensions (a matrix)\n    #witch row's correspond to an example. target is a\n    #numpy.ndarray of 1 dimensions (vector)) that have the same length as\n    #the number of rows in the input. It should give the target\n    #target to the example with the same index in the input.\n\n    def shared_dataset(data_xy, borrow=True):\n        \"\"\" Function that loads the dataset into shared variables\n\n        The reason we store our dataset in shared variables is to allow\n        Theano to copy it into the GPU memory (when code is run on GPU).\n        Since copying data into the GPU is slow, copying a minibatch everytime\n        is needed (the default behaviour if the data is not in a shared\n        variable) would lead to a large decrease in performance.\n        \"\"\"\n        data_x, data_y = data_xy\n        shared_x = theano.shared(numpy.asarray(data_x,\n                                               dtype=theano.config.floatX),\n                                 borrow=borrow)\n        shared_y = theano.shared(numpy.asarray(data_y,\n                                               dtype=theano.config.floatX),\n                                 borrow=borrow)\n        # When storing data on the GPU it has to be stored as floats\n        # therefore we will store the labels as ``floatX`` as well\n        # (``shared_y`` does exactly that). But during our computations\n        # we need them as ints (we use labels as index, and if they are\n        # floats it doesn't make sense) therefore instead of returning\n        # ``shared_y`` we will have to cast it to int. This little hack\n        # lets ous get around this issue\n        return shared_x, T.cast(shared_y, 'int32')\n\n    test_set_x, test_set_y = shared_dataset(test_set)\n    valid_set_x, valid_set_y = shared_dataset(valid_set)\n    train_set_x, train_set_y = shared_dataset(train_set)\n\n    rval = [(train_set_x, train_set_y), (valid_set_x, valid_set_y),\n            (test_set_x, test_set_y)]\n    return rval\n\n\ndef sgd_optimization_mnist(learning_rate=0.13, n_epochs=1000,\n                           dataset='mnist.pkl.gz',\n                           batch_size=600):\n    \"\"\"\n    Demonstrate stochastic gradient descent optimization of a log-linear\n    model\n\n    This is demonstrated on MNIST.\n\n    :type learning_rate: float\n    :param learning_rate: learning rate used (factor for the stochastic\n                          gradient)\n\n    :type n_epochs: int\n    :param n_epochs: maximal number of epochs to run the optimizer\n\n    :type dataset: string\n    :param dataset: the path of the MNIST dataset file from\n                 http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz\n\n    \"\"\"\n    datasets = load_data(dataset)\n\n    train_set_x, train_set_y = datasets[0]\n    valid_set_x, valid_set_y = datasets[1]\n    test_set_x, test_set_y = datasets[2]\n\n    # compute number of minibatches for training, validation and testing\n    n_train_batches = train_set_x.get_value(borrow=True).shape[0] / batch_size\n    n_valid_batches = valid_set_x.get_value(borrow=True).shape[0] / batch_size\n    n_test_batches = test_set_x.get_value(borrow=True).shape[0] / batch_size\n\n    ######################\n    # BUILD ACTUAL MODEL #\n    ######################\n    print '... building the model'\n\n    # allocate symbolic variables for the data\n    index = T.lscalar()  # index to a [mini]batch\n\n    # generate symbolic variables for input (x and y represent a\n    # minibatch)\n    x = T.matrix('x')  # data, presented as rasterized images\n    y = T.ivector('y')  # labels, presented as 1D vector of [int] labels\n\n    # construct the logistic regression class\n    # Each MNIST image has size 28*28\n    classifier = LogisticRegression(input=x, n_in=28 * 28, n_out=10)\n\n    # the cost we minimize during training is the negative log likelihood of\n    # the model in symbolic format\n    cost = classifier.negative_log_likelihood(y)\n\n    # compiling a Theano function that computes the mistakes that are made by\n    # the model on a minibatch\n    test_model = theano.function(\n        inputs=[index],\n        outputs=classifier.errors(y),\n        givens={\n            x: test_set_x[index * batch_size: (index + 1) * batch_size],\n            y: test_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    validate_model = theano.function(\n        inputs=[index],\n        outputs=classifier.errors(y),\n        givens={\n            x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n            y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n\n    # compute the gradient of cost with respect to theta = (W,b)\n    g_W = T.grad(cost=cost, wrt=classifier.W)\n    g_b = T.grad(cost=cost, wrt=classifier.b)\n\n    # start-snippet-3\n    # specify how to update the parameters of the model as a list of\n    # (variable, update expression) pairs.\n    updates = [(classifier.W, classifier.W - learning_rate * g_W),\n               (classifier.b, classifier.b - learning_rate * g_b)]\n\n    # compiling a Theano function `train_model` that returns the cost, but in\n    # the same time updates the parameter of the model based on the rules\n    # defined in `updates`\n    train_model = theano.function(\n        inputs=[index],\n        outputs=cost,\n        updates=updates,\n        givens={\n            x: train_set_x[index * batch_size: (index + 1) * batch_size],\n            y: train_set_y[index * batch_size: (index + 1) * batch_size]\n        }\n    )\n    # end-snippet-3\n\n    ###############\n    # TRAIN MODEL #\n    ###############\n    print '... training the model'\n    # early-stopping parameters\n    patience = 5000  # look as this many examples regardless\n    patience_increase = 2  # wait this much longer when a new best is\n                                  # found\n    improvement_threshold = 0.995  # a relative improvement of this much is\n                                  # considered significant\n    validation_frequency = min(n_train_batches, patience / 2)\n                                  # go through this many\n                                  # minibatche before checking the network\n                                  # on the validation set; in this case we\n                                  # check every epoch\n\n    best_validation_loss = numpy.inf\n    test_score = 0.\n    start_time = time.clock()\n\n    done_looping = False\n    epoch = 0\n    while (epoch < n_epochs) and (not done_looping):\n        epoch = epoch + 1\n        for minibatch_index in xrange(n_train_batches):\n\n            minibatch_avg_cost = train_model(minibatch_index)\n            # iteration number\n            iter = (epoch - 1) * n_train_batches + minibatch_index\n\n            if (iter + 1) % validation_frequency == 0:\n                # compute zero-one loss on validation set\n                validation_losses = [validate_model(i)\n                                     for i in xrange(n_valid_batches)]\n                this_validation_loss = numpy.mean(validation_losses)\n\n                print(\n                    'epoch %i, minibatch %i/%i, validation error %f %%' %\n                    (\n                        epoch,\n                        minibatch_index + 1,\n                        n_train_batches,\n                        this_validation_loss * 100.\n                    )\n                )\n\n                # if we got the best validation score until now\n                if this_validation_loss < best_validation_loss:\n                    #improve patience if loss improvement is good enough\n                    if this_validation_loss < best_validation_loss *  \\\n                       improvement_threshold:\n                        patience = max(patience, iter * patience_increase)\n\n                    best_validation_loss = this_validation_loss\n                    # test it on the test set\n\n                    test_losses = [test_model(i)\n                                   for i in xrange(n_test_batches)]\n                    test_score = numpy.mean(test_losses)\n\n                    print(\n                        (\n                            '     epoch %i, minibatch %i/%i, test error of'\n                            ' best model %f %%'\n                        ) %\n                        (\n                            epoch,\n                            minibatch_index + 1,\n                            n_train_batches,\n                            test_score * 100.\n                        )\n                    )\n\n            if patience <= iter:\n                done_looping = True\n                break\n\n    end_time = time.clock()\n    print(\n        (\n            'Optimization complete with best validation score of %f %%,'\n            'with test performance %f %%'\n        )\n        % (best_validation_loss * 100., test_score * 100.)\n    )\n    print 'The code run for %d epochs, with %f epochs/sec' % (\n        epoch, 1. * epoch / (end_time - start_time))\n    print >> sys.stderr, ('The code for file ' +\n                          os.path.split(__file__)[1] +\n                          ' ran for %.1fs' % ((end_time - start_time)))\n\nif __name__ == '__main__':\n    sgd_optimization_mnist()\n",
			"file": "logistic_sgd.py",
			"file_size": 20864,
			"file_write_time": 130785674647175151,
			"settings":
			{
				"buffer_size": 20864,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 112.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/guillaume/Bureau/nelet5"
	],
	"file_history":
	[
		"/etc/fstab",
		"/home/guillaume/Dropbox/.conf/README.txt",
		"/home/guillaume/Bureau/nelet5/obj.save",
		"/home/guillaume/Bureau/nelet5/titre",
		"/home/guillaume/Bureau/nelet5/logistic_sgd.py",
		"/home/guillaume/Bureau/nelet5/convAll.py",
		"/home/guillaume/Bureau/nelet5/conv.py",
		"/home/guillaume/Bureau/nelet5/conv2.py",
		"/home/guillaume/Bureau/nelet5/conv",
		"/home/guillaume/Bureau/scatnet-master/ond.m",
		"/home/guillaume/Stage/java/src/b_mnist.java",
		"/home/guillaume/Stage/java/src/b_mat.java",
		"/home/guillaume/Stage/java/src/essai-results.txt",
		"/home/guillaume/Stage/java/src/train.java",
		"/home/guillaume/Stage/java/src/essai.java",
		"/opt/extras.ubuntu.com/indicator-stickynotes/stickynotes/info.py",
		"/home/guillaume/Stage/java/src/essairesults.txt",
		"/home/guillaume/Stage/java/src/results.txt",
		"/home/guillaume/Stage/java/src/train",
		"/home/guillaume/Dropbox/.conf/lightdm.conf",
		"/home/guillaume/.conkyrc",
		"/home/guillaume/.bashrc",
		"/bin/sticky.sh",
		"/home/guillaume/Stage/java/src/essai.",
		"/home/guillaume/Téléchargements/indicator-stickynotes-0.4.3/PKG-INFO"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"striW",
			"stri",
			"titre",
			"show",
			"sho",
			"cost",
			"save_re",
			"save",
			"sort",
			"ch"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"strip",
			"striW"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "conv.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21037,
						"regions":
						{
						},
						"selection":
						[
							[
								15408,
								15408
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8390.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "convAll.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21472,
						"regions":
						{
						},
						"selection":
						[
							[
								19776,
								19776
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10367.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/guillaume/Dropbox/.conf/README.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1369,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Diff/Diff.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 183,
						"regions":
						{
						},
						"selection":
						[
							[
								182,
								182
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "inv-p",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 317,
						"regions":
						{
						},
						"selection":
						[
							[
								317,
								317
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "mlp.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16274,
						"regions":
						{
						},
						"selection":
						[
							[
								5369,
								5369
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2702.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "logistic_sgd.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20864,
						"regions":
						{
						},
						"selection":
						[
							[
								6112,
								6112
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3600.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "nelet5.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				".sa",
				"obj.save"
			],
			[
				"-p",
				"inv-p"
			],
			[
				"mlp",
				"mlp.py"
			],
			[
				"lo",
				"logistic_sgd.py"
			],
			[
				"cn",
				"convAll.py"
			],
			[
				"titre",
				"titre"
			],
			[
				"con",
				"conv.py"
			],
			[
				"logist",
				"logistic_sgd.py"
			],
			[
				"b_mni",
				"src/b_mnist.java"
			],
			[
				"essai",
				"src/essai-results.txt"
			],
			[
				"essaire",
				"src/essairesults.txt"
			],
			[
				"b_",
				"src/b_mat.java"
			],
			[
				"re",
				"src/results.txt"
			],
			[
				"",
				"src/essai.java"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
